---
import CopyIcon from "./CopyIcon.astro";
---

<div class="space-y-4 mt-10 max-w-[850px] px-8 mx-auto">
  <!-- Header -->
  <header class="text-center mb-10">
    <h1
      class="text-4xl font-extrabold text-gray-900 mb-3 tracking-tight leading-tight"
    >
      üîç URL Inspector
    </h1>
    <p class="text-gray-600 text-base sm:text-lg max-w-xl mx-auto">
      Analyze and inspect any URL with full details
    </p>
  </header>

  <!-- Form -->
  <form id="url-form" class="w-full mx-auto">
    <div class="flex flex-col sm:flex-row gap-3 sm:gap-4">
      <input
        id="url-input"
        name="url"
        type="url"
        inputmode="url"
        autocomplete="off"
        class="flex-1 border border-gray-300 rounded-md px-4 py-2 text-sm text-gray-800 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#2a99c9] focus:border-transparent transition-all"
        placeholder="Enter a URL‚Ä¶"
        required
      />
      <button
        type="submit"
        class="bg-[#0c3b5c] text-white text-sm font-medium px-5 py-2 rounded-md hover:bg-[#2a99c9] shadow-sm hover:shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[#2a99c9]"
      >
        Inspect
      </button>
    </div>
  </form>

  <!-- Report -->
  <section id="report" class="hidden mt-10">
    <div>
      <strong
        id="url-encoded-label"
        class="text-gray-900 text-sm uppercase tracking-wide"
      >
      </strong>
    </div>

    <div
      class="bg-gray-50 border border-gray-200 rounded-lg px-4 py-3 mt-2 relative group shadow-sm transition-shadow hover:shadow-md"
    >
      <span
        id="url-encoded-value"
        class="break-all text-gray-800 text-sm leading-relaxed select-all"
      ></span>

      <div
        class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200"
      >
        <button
          id="url-encoded-button"
          class="bg-white hover:bg-gray-100 border border-gray-300 px-2 py-1 rounded-md shadow-sm hover:shadow-md transition-all duration-200"
          aria-label="Copy to clipboard"
        >
          <CopyIcon />
        </button>
      </div>
    </div>
  </section>

  <!-- Query Params Table -->
  <section id="query-params" class="space-y-4 mt-10 max-w-3xl mx-auto">
    <strong class="text-gray-900 text-sm uppercase tracking-wide">
      Query Parameters
    </strong>

    <div
      class="overflow-x-auto rounded-lg border border-gray-200 shadow-sm mt-2"
    >
      <table class="table-auto w-full text-sm text-left text-gray-700">
        <thead class="bg-gray-50 border-b border-gray-200">
          <tr>
            <th class="px-4 py-2 font-semibold text-gray-800">Key</th>
            <th class="px-4 py-2 font-semibold text-gray-800">Raw Value</th>
          </tr>
        </thead>
        <tbody id="query-params-table-body"> </tbody>
      </table>
    </div>

    <!-- Mensaje cuando no hay par√°metros -->
    <p id="query-params-no-results" class="text-gray-500 text-sm italic hidden">
      No query parameters found.
    </p>
  </section>

  <!-- Error -->
  <div id="error" class="text-red-500"></div>
</div>

<script type="module">
  const form = document.getElementById("url-form");
  const input = document.getElementById("url-input");
  const report = document.getElementById("report");
  const queryParams = document.getElementById("query-params");
  const errorDiv = document.getElementById("error");
  const urlEncodedLabel = document.getElementById("url-encoded-label");
  const urlEncodedValue = document.getElementById("url-encoded-value");
  const urlEncodedButton = document.getElementById("url-encoded-button");
  const utmsTableBody = document.getElementById("query-params-table-body");
  const utmsNoResults = document.getElementById("query-params-no-results");

  const processUrl = (raw) => {
    try {
      const encoded = encodeURIComponent(raw);
      const decoded = decodeURIComponent(raw);
      const isEncoded = decoded !== raw;
      const url = isEncoded ? new URL(decoded) : new URL(raw);

      // Saving last url for future session
      localStorage.setItem(lastUrlStorageKey, url);

      // Clear error div because url is valid
      errorDiv.textContent = "";

      // Set url encoded and decoded values
      if (isEncoded) {
        urlEncodedLabel.textContent = "URL Decoded";
        urlEncodedValue.textContent = decoded;
      } else {
        urlEncodedLabel.textContent = "URL Encoded";
        urlEncodedValue.textContent = encoded;
      }

      // Copy value to clipboard on click button
      urlEncodedButton.addEventListener("click", (e) => {
        e.stopPropagation();
        navigator.clipboard.writeText(url.href);
      });

      // Show report section
      report.classList.remove("hidden");

      const params = Array.from(url.searchParams.entries());
      if (params.length > 0) {
        // Remove "no results message"
        utmsNoResults.classList.add("hidden");

        // Remove current query-params
        utmsTableBody.replaceChildren();

        // We add each query param to the table
        for (const param of params) {
          const tr = document.createElement("tr");
          tr.className =
            "hover:bg-gray-50 transition-colors border-b border-gray-100";

          // First column
          const tdKey = document.createElement("td");
          tdKey.className = "px-4 py-2 font-medium text-gray-800";
          tdKey.innerText = param[0];
          // Second column
          const tdValue = document.createElement("td");
          tdValue.className = "px-4 py-2 text-gray-600";
          tdValue.innerText = param[1];

          tr.appendChild(tdKey);
          tr.appendChild(tdValue);

          utmsTableBody.appendChild(tr);
        }
      } else {
        // Show no results message
        utmsNoResults.classList.remove("hidden");
      }

      // Show query-params section
      queryParams.classList.remove("hidden");
    } catch (err) {
      console.log("error", err);

      errorDiv.textContent = "Invalid URL";

      // Hide report and query-params section
      report.classList.add("hidden");
      queryParams.classList.add("hidden");
    }
  };

  const lastUrlStorageKey = "last_url";
  const lastUrl = localStorage.getItem(lastUrlStorageKey);
  if (lastUrl) {
    input.value = lastUrl;
    processUrl(lastUrl);
  }

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const raw = input.value.trim();
    processUrl(raw);
  });
</script>
